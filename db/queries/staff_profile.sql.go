// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: staff_profile.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createStaffProfile = `-- name: CreateStaffProfile :one
INSERT INTO staff_profiles (
    user_id, employee_id, department_id, position_id, joining_date
) VALUES (
    $1, $2, $3, $4, COALESCE($5, CURRENT_DATE)
) RETURNING id, user_id, employee_id, department_id, position_id, joining_date
`

type CreateStaffProfileParams struct {
	UserID       int32       `json:"user_id"`
	EmployeeID   string      `json:"employee_id"`
	DepartmentID int32       `json:"department_id"`
	PositionID   int32       `json:"position_id"`
	Column5      interface{} `json:"column_5"`
}

func (q *Queries) CreateStaffProfile(ctx context.Context, arg CreateStaffProfileParams) (StaffProfile, error) {
	row := q.db.QueryRow(ctx, createStaffProfile,
		arg.UserID,
		arg.EmployeeID,
		arg.DepartmentID,
		arg.PositionID,
		arg.Column5,
	)
	var i StaffProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.EmployeeID,
		&i.DepartmentID,
		&i.PositionID,
		&i.JoiningDate,
	)
	return i, err
}

const deleteStaffProfile = `-- name: DeleteStaffProfile :exec
DELETE FROM staff_profiles WHERE user_id = $1
`

func (q *Queries) DeleteStaffProfile(ctx context.Context, userID int32) error {
	_, err := q.db.Exec(ctx, deleteStaffProfile, userID)
	return err
}

const getStaffProfileByUserID = `-- name: GetStaffProfileByUserID :one
SELECT id, user_id, employee_id, department_id, position_id, joining_date FROM staff_profiles WHERE user_id = $1
`

func (q *Queries) GetStaffProfileByUserID(ctx context.Context, userID int32) (StaffProfile, error) {
	row := q.db.QueryRow(ctx, getStaffProfileByUserID, userID)
	var i StaffProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.EmployeeID,
		&i.DepartmentID,
		&i.PositionID,
		&i.JoiningDate,
	)
	return i, err
}

const listStaffsPaginated = `-- name: ListStaffsPaginated :many
SELECT 
  u.id AS user_id,
  u.first_name,
  u.last_name,
  u.email,
  u.phone_number,
  u.date_of_birth,
  u.is_active,
  s.employee_id,
  s.department_id,
  s.position_id,
  s.joining_date
FROM users u
JOIN staff_profiles s ON u.id = s.user_id
ORDER BY u.id DESC
LIMIT $1 OFFSET $2
`

type ListStaffsPaginatedParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListStaffsPaginatedRow struct {
	UserID       int32       `json:"user_id"`
	FirstName    string      `json:"first_name"`
	LastName     pgtype.Text `json:"last_name"`
	Email        string      `json:"email"`
	PhoneNumber  pgtype.Text `json:"phone_number"`
	DateOfBirth  pgtype.Date `json:"date_of_birth"`
	IsActive     pgtype.Bool `json:"is_active"`
	EmployeeID   string      `json:"employee_id"`
	DepartmentID int32       `json:"department_id"`
	PositionID   int32       `json:"position_id"`
	JoiningDate  pgtype.Date `json:"joining_date"`
}

func (q *Queries) ListStaffsPaginated(ctx context.Context, arg ListStaffsPaginatedParams) ([]ListStaffsPaginatedRow, error) {
	rows, err := q.db.Query(ctx, listStaffsPaginated, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListStaffsPaginatedRow{}
	for rows.Next() {
		var i ListStaffsPaginatedRow
		if err := rows.Scan(
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.PhoneNumber,
			&i.DateOfBirth,
			&i.IsActive,
			&i.EmployeeID,
			&i.DepartmentID,
			&i.PositionID,
			&i.JoiningDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStaffProfile = `-- name: UpdateStaffProfile :one
UPDATE staff_profiles
SET
user_id = COALESCE($1, user_id),
employee_id = COALESCE($2, employee_id),
department_id = COALESCE($3, department_id),
position_id = COALESCE($4, position_id),
joining_date = COALESCE($5, joining_date)
WHERE user_id = $6
RETURNING id, user_id, employee_id, department_id, position_id, joining_date
`

type UpdateStaffProfileParams struct {
	UserID       int32       `json:"user_id"`
	EmployeeID   string      `json:"employee_id"`
	DepartmentID int32       `json:"department_id"`
	PositionID   int32       `json:"position_id"`
	JoiningDate  pgtype.Date `json:"joining_date"`
	UserID_2     int32       `json:"user_id_2"`
}

func (q *Queries) UpdateStaffProfile(ctx context.Context, arg UpdateStaffProfileParams) (StaffProfile, error) {
	row := q.db.QueryRow(ctx, updateStaffProfile,
		arg.UserID,
		arg.EmployeeID,
		arg.DepartmentID,
		arg.PositionID,
		arg.JoiningDate,
		arg.UserID_2,
	)
	var i StaffProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.EmployeeID,
		&i.DepartmentID,
		&i.PositionID,
		&i.JoiningDate,
	)
	return i, err
}
