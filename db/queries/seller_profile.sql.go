// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: seller_profile.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSellerProfile = `-- name: CreateSellerProfile :one
INSERT INTO seller_profiles (user_id, store_name, gst_number, average_rating)
VALUES ($1, $2, $3, COALESCE($4, 0.00))
RETURNING id, user_id, store_name, gst_number, average_rating
`

type CreateSellerProfileParams struct {
	UserID    int32       `json:"user_id"`
	StoreName string      `json:"store_name"`
	GstNumber pgtype.Text `json:"gst_number"`
	Column4   interface{} `json:"column_4"`
}

func (q *Queries) CreateSellerProfile(ctx context.Context, arg CreateSellerProfileParams) (SellerProfile, error) {
	row := q.db.QueryRow(ctx, createSellerProfile,
		arg.UserID,
		arg.StoreName,
		arg.GstNumber,
		arg.Column4,
	)
	var i SellerProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StoreName,
		&i.GstNumber,
		&i.AverageRating,
	)
	return i, err
}

const deleteSellerProfile = `-- name: DeleteSellerProfile :exec
DELETE FROM seller_profiles WHERE user_id = $1
`

func (q *Queries) DeleteSellerProfile(ctx context.Context, userID int32) error {
	_, err := q.db.Exec(ctx, deleteSellerProfile, userID)
	return err
}

const getSellerProfileByUserID = `-- name: GetSellerProfileByUserID :one
SELECT id, user_id, store_name, gst_number, average_rating FROM seller_profiles WHERE user_id = $1
`

func (q *Queries) GetSellerProfileByUserID(ctx context.Context, userID int32) (SellerProfile, error) {
	row := q.db.QueryRow(ctx, getSellerProfileByUserID, userID)
	var i SellerProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StoreName,
		&i.GstNumber,
		&i.AverageRating,
	)
	return i, err
}

const listSellersPaginated = `-- name: ListSellersPaginated :many
SELECT 
  u.id AS user_id,
  u.first_name,
  u.last_name,
  u.email,
  u.phone_number,
  u.date_of_birth,
  u.is_active,
  sp.store_name,
  sp.gst_number,
  sp.average_rating
FROM users u
JOIN seller_profiles sp ON u.id = sp.user_id
ORDER BY u.id DESC
LIMIT $1 OFFSET $2
`

type ListSellersPaginatedParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListSellersPaginatedRow struct {
	UserID        int32          `json:"user_id"`
	FirstName     string         `json:"first_name"`
	LastName      pgtype.Text    `json:"last_name"`
	Email         string         `json:"email"`
	PhoneNumber   pgtype.Text    `json:"phone_number"`
	DateOfBirth   pgtype.Date    `json:"date_of_birth"`
	IsActive      pgtype.Bool    `json:"is_active"`
	StoreName     string         `json:"store_name"`
	GstNumber     pgtype.Text    `json:"gst_number"`
	AverageRating pgtype.Numeric `json:"average_rating"`
}

func (q *Queries) ListSellersPaginated(ctx context.Context, arg ListSellersPaginatedParams) ([]ListSellersPaginatedRow, error) {
	rows, err := q.db.Query(ctx, listSellersPaginated, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListSellersPaginatedRow{}
	for rows.Next() {
		var i ListSellersPaginatedRow
		if err := rows.Scan(
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.PhoneNumber,
			&i.DateOfBirth,
			&i.IsActive,
			&i.StoreName,
			&i.GstNumber,
			&i.AverageRating,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSellerProfile = `-- name: UpdateSellerProfile :one
UPDATE seller_profiles
SET 
store_name = COALESCE($1,store_name), 
gst_number = COALESCE($2,gst_number),
average_rating = COALESCE($3, average_rating)
WHERE user_id = $4
RETURNING id, user_id, store_name, gst_number, average_rating
`

type UpdateSellerProfileParams struct {
	StoreName     string         `json:"store_name"`
	GstNumber     pgtype.Text    `json:"gst_number"`
	AverageRating pgtype.Numeric `json:"average_rating"`
	UserID        int32          `json:"user_id"`
}

func (q *Queries) UpdateSellerProfile(ctx context.Context, arg UpdateSellerProfileParams) (SellerProfile, error) {
	row := q.db.QueryRow(ctx, updateSellerProfile,
		arg.StoreName,
		arg.GstNumber,
		arg.AverageRating,
		arg.UserID,
	)
	var i SellerProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StoreName,
		&i.GstNumber,
		&i.AverageRating,
	)
	return i, err
}
