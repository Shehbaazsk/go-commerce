// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: others.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDepartment = `-- name: CreateDepartment :one
INSERT INTO departments (name, manager_id)
VALUES ($1, $2)
RETURNING id, name, manager_id
`

type CreateDepartmentParams struct {
	Name      string `json:"name"`
	ManagerID int32  `json:"manager_id"`
}

func (q *Queries) CreateDepartment(ctx context.Context, arg CreateDepartmentParams) (Department, error) {
	row := q.db.QueryRow(ctx, createDepartment, arg.Name, arg.ManagerID)
	var i Department
	err := row.Scan(&i.ID, &i.Name, &i.ManagerID)
	return i, err
}

const createPosition = `-- name: CreatePosition :one
INSERT INTO positions (title, description)
VALUES ($1, $2)
RETURNING id, title, description
`

type CreatePositionParams struct {
	Title       string      `json:"title"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) CreatePosition(ctx context.Context, arg CreatePositionParams) (Position, error) {
	row := q.db.QueryRow(ctx, createPosition, arg.Title, arg.Description)
	var i Position
	err := row.Scan(&i.ID, &i.Title, &i.Description)
	return i, err
}

const deleteDepartment = `-- name: DeleteDepartment :exec
DELETE FROM departments WHERE id = $1
`

func (q *Queries) DeleteDepartment(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteDepartment, id)
	return err
}

const deletePosition = `-- name: DeletePosition :exec
DELETE FROM positions WHERE id = $1
`

func (q *Queries) DeletePosition(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deletePosition, id)
	return err
}

const getDepartmentByID = `-- name: GetDepartmentByID :one
SELECT id, name, manager_id FROM departments WHERE id = $1
`

func (q *Queries) GetDepartmentByID(ctx context.Context, id int32) (Department, error) {
	row := q.db.QueryRow(ctx, getDepartmentByID, id)
	var i Department
	err := row.Scan(&i.ID, &i.Name, &i.ManagerID)
	return i, err
}

const getPositionByID = `-- name: GetPositionByID :one
SELECT id, title, description FROM positions WHERE id = $1
`

func (q *Queries) GetPositionByID(ctx context.Context, id int32) (Position, error) {
	row := q.db.QueryRow(ctx, getPositionByID, id)
	var i Position
	err := row.Scan(&i.ID, &i.Title, &i.Description)
	return i, err
}

const listDepartmentsPaginated = `-- name: ListDepartmentsPaginated :many
SELECT id, name, manager_id FROM departments
ORDER BY id DESC
LIMIT $1 OFFSET $2
`

type ListDepartmentsPaginatedParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListDepartmentsPaginated(ctx context.Context, arg ListDepartmentsPaginatedParams) ([]Department, error) {
	rows, err := q.db.Query(ctx, listDepartmentsPaginated, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Department{}
	for rows.Next() {
		var i Department
		if err := rows.Scan(&i.ID, &i.Name, &i.ManagerID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPositionsPaginated = `-- name: ListPositionsPaginated :many
SELECT id, title, description FROM positions
ORDER BY id DESC
LIMIT $1 OFFSET $2
`

type ListPositionsPaginatedParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPositionsPaginated(ctx context.Context, arg ListPositionsPaginatedParams) ([]Position, error) {
	rows, err := q.db.Query(ctx, listPositionsPaginated, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Position{}
	for rows.Next() {
		var i Position
		if err := rows.Scan(&i.ID, &i.Title, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDepartment = `-- name: UpdateDepartment :one
UPDATE departments
SET 
    name = COALESCE($1, name), 
    manager_id = COALESCE($2, manager_id)
WHERE id = $3
RETURNING id, name, manager_id
`

type UpdateDepartmentParams struct {
	Name      string `json:"name"`
	ManagerID int32  `json:"manager_id"`
	ID        int32  `json:"id"`
}

func (q *Queries) UpdateDepartment(ctx context.Context, arg UpdateDepartmentParams) (Department, error) {
	row := q.db.QueryRow(ctx, updateDepartment, arg.Name, arg.ManagerID, arg.ID)
	var i Department
	err := row.Scan(&i.ID, &i.Name, &i.ManagerID)
	return i, err
}

const updatePosition = `-- name: UpdatePosition :one
UPDATE positions
SET 
    title = COALESCE($1, title), 
    description = COALESCE($2, description)
WHERE id = $3
RETURNING id, title, description
`

type UpdatePositionParams struct {
	Title       string      `json:"title"`
	Description pgtype.Text `json:"description"`
	ID          int32       `json:"id"`
}

func (q *Queries) UpdatePosition(ctx context.Context, arg UpdatePositionParams) (Position, error) {
	row := q.db.QueryRow(ctx, updatePosition, arg.Title, arg.Description, arg.ID)
	var i Position
	err := row.Scan(&i.ID, &i.Title, &i.Description)
	return i, err
}
